#[doc = "Register `AUD_CTS3` reader"]
pub type R = crate::R<AudCts3Spec>;
#[doc = "Register `AUD_CTS3` writer"]
pub type W = crate::W<AudCts3Spec>;
#[doc = "Field `AUDCTS` reader - HDMI Audio Clock Regenerator CTS calculated value.\n\nThis value can be manually set using the CTS_manual\n\n(AUD_CTS3) mechanism."]
pub type AudctsR = crate::FieldReader;
#[doc = "Field `AUDCTS` writer - HDMI Audio Clock Regenerator CTS calculated value.\n\nThis value can be manually set using the CTS_manual\n\n(AUD_CTS3) mechanism."]
pub type AudctsW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
#[doc = "Field `CTS_MANUAL` reader - If the CTS_manual bit equals 0b, this registers\n\ncontains audCTS\\[19:0\\]
generated by the Cycle time\n\ncounter according to the specified timing. If the\n\nCTS_manual bit equals 1b, this register is configured\n\nwith the audCTS\\[7:0\\]
value that is output by the\n\nAudio Packetizer.\n\nNote: When the General Parallel Audio Interface\n\n(GPAUD) is enabled (AUDIO_IF = 6) or the AHB DMA\n\nAudio Interface is enabled (AUDIO_IF = 8), writing to\n\nthese bits has no effect; reading these bits always\n\nreturn 0."]
pub type CtsManualR = crate::BitReader;
#[doc = "Field `CTS_MANUAL` writer - If the CTS_manual bit equals 0b, this registers\n\ncontains audCTS\\[19:0\\]
generated by the Cycle time\n\ncounter according to the specified timing. If the\n\nCTS_manual bit equals 1b, this register is configured\n\nwith the audCTS\\[7:0\\]
value that is output by the\n\nAudio Packetizer.\n\nNote: When the General Parallel Audio Interface\n\n(GPAUD) is enabled (AUDIO_IF = 6) or the AHB DMA\n\nAudio Interface is enabled (AUDIO_IF = 8), writing to\n\nthese bits has no effect; reading these bits always\n\nreturn 0."]
pub type CtsManualW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `SPARE_BITS` reader - Reserved as \"spare\" bits with no associated\n\nfunctionality."]
pub type SpareBitsR = crate::FieldReader;
#[doc = "Field `SPARE_BITS` writer - Reserved as \"spare\" bits with no associated\n\nfunctionality."]
pub type SpareBitsW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
impl R {
    #[doc = "Bits 0:3 - HDMI Audio Clock Regenerator CTS calculated value.\n\nThis value can be manually set using the CTS_manual\n\n(AUD_CTS3) mechanism."]
    #[inline(always)]
    pub fn audcts(&self) -> AudctsR {
        AudctsR::new(self.bits & 0x0f)
    }
    #[doc = "Bit 4 - If the CTS_manual bit equals 0b, this registers\n\ncontains audCTS\\[19:0\\]
generated by the Cycle time\n\ncounter according to the specified timing. If the\n\nCTS_manual bit equals 1b, this register is configured\n\nwith the audCTS\\[7:0\\]
value that is output by the\n\nAudio Packetizer.\n\nNote: When the General Parallel Audio Interface\n\n(GPAUD) is enabled (AUDIO_IF = 6) or the AHB DMA\n\nAudio Interface is enabled (AUDIO_IF = 8), writing to\n\nthese bits has no effect; reading these bits always\n\nreturn 0."]
    #[inline(always)]
    pub fn cts_manual(&self) -> CtsManualR {
        CtsManualR::new(((self.bits >> 4) & 1) != 0)
    }
    #[doc = "Bits 5:7 - Reserved as \"spare\" bits with no associated\n\nfunctionality."]
    #[inline(always)]
    pub fn spare_bits(&self) -> SpareBitsR {
        SpareBitsR::new((self.bits >> 5) & 7)
    }
}
impl W {
    #[doc = "Bits 0:3 - HDMI Audio Clock Regenerator CTS calculated value.\n\nThis value can be manually set using the CTS_manual\n\n(AUD_CTS3) mechanism."]
    #[inline(always)]
    #[must_use]
    pub fn audcts(&mut self) -> AudctsW<AudCts3Spec> {
        AudctsW::new(self, 0)
    }
    #[doc = "Bit 4 - If the CTS_manual bit equals 0b, this registers\n\ncontains audCTS\\[19:0\\]
generated by the Cycle time\n\ncounter according to the specified timing. If the\n\nCTS_manual bit equals 1b, this register is configured\n\nwith the audCTS\\[7:0\\]
value that is output by the\n\nAudio Packetizer.\n\nNote: When the General Parallel Audio Interface\n\n(GPAUD) is enabled (AUDIO_IF = 6) or the AHB DMA\n\nAudio Interface is enabled (AUDIO_IF = 8), writing to\n\nthese bits has no effect; reading these bits always\n\nreturn 0."]
    #[inline(always)]
    #[must_use]
    pub fn cts_manual(&mut self) -> CtsManualW<AudCts3Spec> {
        CtsManualW::new(self, 4)
    }
    #[doc = "Bits 5:7 - Reserved as \"spare\" bits with no associated\n\nfunctionality."]
    #[inline(always)]
    #[must_use]
    pub fn spare_bits(&mut self) -> SpareBitsW<AudCts3Spec> {
        SpareBitsW::new(self, 5)
    }
}
#[doc = "Audio Clock Regenerator CTS value Register 3. For CTS expected values, refer\n\nto the HDMI 1.4b specification.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`aud_cts3::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`aud_cts3::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct AudCts3Spec;
impl crate::RegisterSpec for AudCts3Spec {
    type Ux = u8;
}
#[doc = "`read()` method returns [`aud_cts3::R`](R) reader structure"]
impl crate::Readable for AudCts3Spec {}
#[doc = "`write(|w| ..)` method takes [`aud_cts3::W`](W) writer structure"]
impl crate::Writable for AudCts3Spec {
    type Safety = crate::Unsafe;
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
}
#[doc = "`reset()` method sets AUD_CTS3 to value 0"]
impl crate::Resettable for AudCts3Spec {
    const RESET_VALUE: u8 = 0;
}
