#[doc = "Register `EMMCCORE_TIMEOUT` reader"]
pub type R = crate::R<EmmccoreTimeoutSpec>;
#[doc = "Register `EMMCCORE_TIMEOUT` writer"]
pub type W = crate::W<EmmccoreTimeoutSpec>;
#[doc = "Field `DATATIMEOUTCOUNTERVALUE` reader - This value determines the interval by which DAT line time-outs are detected. Refer to the Data Time-out Error in the Error Interrupt Statusregister for information on factors that dictate time-out generation. Time-out clock frequency will be generated by dividing the sdclockTMCLK by this value. When setting this register, prevent inadvertent time-out events by clearing the Data Time-out Error Status Enable (in the Error Interrupt Status Enable register). 4'hf: Reserved 4'he: TMCLK * 2^27 ...... 4'h1: TMCLK * 2^14 4'h0: TMCLK * 2^13"]
pub type DatatimeoutcountervalueR = crate::FieldReader;
#[doc = "Field `DATATIMEOUTCOUNTERVALUE` writer - This value determines the interval by which DAT line time-outs are detected. Refer to the Data Time-out Error in the Error Interrupt Statusregister for information on factors that dictate time-out generation. Time-out clock frequency will be generated by dividing the sdclockTMCLK by this value. When setting this register, prevent inadvertent time-out events by clearing the Data Time-out Error Status Enable (in the Error Interrupt Status Enable register). 4'hf: Reserved 4'he: TMCLK * 2^27 ...... 4'h1: TMCLK * 2^14 4'h0: TMCLK * 2^13"]
pub type DatatimeoutcountervalueW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
impl R {
    #[doc = "Bits 0:3 - This value determines the interval by which DAT line time-outs are detected. Refer to the Data Time-out Error in the Error Interrupt Statusregister for information on factors that dictate time-out generation. Time-out clock frequency will be generated by dividing the sdclockTMCLK by this value. When setting this register, prevent inadvertent time-out events by clearing the Data Time-out Error Status Enable (in the Error Interrupt Status Enable register). 4'hf: Reserved 4'he: TMCLK * 2^27 ...... 4'h1: TMCLK * 2^14 4'h0: TMCLK * 2^13"]
    #[inline(always)]
    pub fn datatimeoutcountervalue(&self) -> DatatimeoutcountervalueR {
        DatatimeoutcountervalueR::new(self.bits & 0x0f)
    }
}
impl W {
    #[doc = "Bits 0:3 - This value determines the interval by which DAT line time-outs are detected. Refer to the Data Time-out Error in the Error Interrupt Statusregister for information on factors that dictate time-out generation. Time-out clock frequency will be generated by dividing the sdclockTMCLK by this value. When setting this register, prevent inadvertent time-out events by clearing the Data Time-out Error Status Enable (in the Error Interrupt Status Enable register). 4'hf: Reserved 4'he: TMCLK * 2^27 ...... 4'h1: TMCLK * 2^14 4'h0: TMCLK * 2^13"]
    #[inline(always)]
    #[must_use]
    pub fn datatimeoutcountervalue(&mut self) -> DatatimeoutcountervalueW<EmmccoreTimeoutSpec> {
        DatatimeoutcountervalueW::new(self, 0)
    }
}
#[doc = "Timeout control register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`emmccore_timeout::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`emmccore_timeout::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct EmmccoreTimeoutSpec;
impl crate::RegisterSpec for EmmccoreTimeoutSpec {
    type Ux = u8;
}
#[doc = "`read()` method returns [`emmccore_timeout::R`](R) reader structure"]
impl crate::Readable for EmmccoreTimeoutSpec {}
#[doc = "`write(|w| ..)` method takes [`emmccore_timeout::W`](W) writer structure"]
impl crate::Writable for EmmccoreTimeoutSpec {
    type Safety = crate::Unsafe;
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
}
#[doc = "`reset()` method sets EMMCCORE_TIMEOUT to value 0"]
impl crate::Resettable for EmmccoreTimeoutSpec {
    const RESET_VALUE: u8 = 0;
}
