#[doc = "Register `GMAC_PMT_CTRL_STA` reader"]
pub type R = crate::R<GmacPmtCtrlStaSpec>;
#[doc = "Register `GMAC_PMT_CTRL_STA` writer"]
pub type W = crate::W<GmacPmtCtrlStaSpec>;
#[doc = "Field `PD` reader - Power Down\n\nWhen set, all received frames will be dropped. This bit is cleared\n\nautomatically when a magic packet or Wake-Up frame is\n\nreceived, and Power-Down mode is disabled. Frames received\n\nafter this bit is cleared are forwarded to the application. This bit\n\nmust only be set when either the Magic Packet Enable or Wake-\n\nUp Frame Enable bit is set high."]
pub type PdR = crate::BitReader;
#[doc = "Field `PD` writer - Power Down\n\nWhen set, all received frames will be dropped. This bit is cleared\n\nautomatically when a magic packet or Wake-Up frame is\n\nreceived, and Power-Down mode is disabled. Frames received\n\nafter this bit is cleared are forwarded to the application. This bit\n\nmust only be set when either the Magic Packet Enable or Wake-\n\nUp Frame Enable bit is set high."]
pub type PdW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `MPE` reader - Magic Packet Enable\n\nWhen set, enables generation of a power management event due\n\nto Magic Packet reception."]
pub type MpeR = crate::BitReader;
#[doc = "Field `MPE` writer - Magic Packet Enable\n\nWhen set, enables generation of a power management event due\n\nto Magic Packet reception."]
pub type MpeW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `WFE` reader - Wake-Up Frame Enable\n\nWhen set, enables generation of a power management event due\n\nto wake-up frame reception."]
pub type WfeR = crate::BitReader;
#[doc = "Field `WFE` writer - Wake-Up Frame Enable\n\nWhen set, enables generation of a power management event due\n\nto wake-up frame reception."]
pub type WfeW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `MPR` reader - Magic Packet Received\n\nWhen set, this bit indicates the power management event was\n\ngenerated by the reception of a Magic Packet. This bit is cleared\n\nby a read into this register.\n\nThe field is **cleared** (set to zero) following a read operation."]
pub type MprR = crate::BitReader;
#[doc = "Field `WFR` reader - Wake-Up Frame Received\n\nWhen set, this bit indicates the power management event was\n\ngenerated due to reception of a wake-up frame. This bit is\n\ncleared by a read into this register.\n\nThe field is **cleared** (set to zero) following a read operation."]
pub type WfrR = crate::BitReader;
#[doc = "Field `GU` reader - Global Unicast\n\nWhen set, enables any unicast packet filtered by the GMAC (DAF)\n\naddress recognition to be a wake-up frame."]
pub type GuR = crate::BitReader;
#[doc = "Field `GU` writer - Global Unicast\n\nWhen set, enables any unicast packet filtered by the GMAC (DAF)\n\naddress recognition to be a wake-up frame."]
pub type GuW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `WFFRPR` reader - Wake-Up Frame Filter Register Pointer Reset\n\nWhen set, resets the Remote Wake-up Frame Filter register\n\npointer to 3'b000. It is automatically cleared after 1 clock cycle."]
pub type WffrprR = crate::BitReader;
#[doc = "Field `WFFRPR` writer - Wake-Up Frame Filter Register Pointer Reset\n\nWhen set, resets the Remote Wake-up Frame Filter register\n\npointer to 3'b000. It is automatically cleared after 1 clock cycle."]
pub type WffrprW<'a, REG> = crate::BitWriter1C<'a, REG>;
impl R {
    #[doc = "Bit 0 - Power Down\n\nWhen set, all received frames will be dropped. This bit is cleared\n\nautomatically when a magic packet or Wake-Up frame is\n\nreceived, and Power-Down mode is disabled. Frames received\n\nafter this bit is cleared are forwarded to the application. This bit\n\nmust only be set when either the Magic Packet Enable or Wake-\n\nUp Frame Enable bit is set high."]
    #[inline(always)]
    pub fn pd(&self) -> PdR {
        PdR::new((self.bits & 1) != 0)
    }
    #[doc = "Bit 1 - Magic Packet Enable\n\nWhen set, enables generation of a power management event due\n\nto Magic Packet reception."]
    #[inline(always)]
    pub fn mpe(&self) -> MpeR {
        MpeR::new(((self.bits >> 1) & 1) != 0)
    }
    #[doc = "Bit 2 - Wake-Up Frame Enable\n\nWhen set, enables generation of a power management event due\n\nto wake-up frame reception."]
    #[inline(always)]
    pub fn wfe(&self) -> WfeR {
        WfeR::new(((self.bits >> 2) & 1) != 0)
    }
    #[doc = "Bit 5 - Magic Packet Received\n\nWhen set, this bit indicates the power management event was\n\ngenerated by the reception of a Magic Packet. This bit is cleared\n\nby a read into this register."]
    #[inline(always)]
    pub fn mpr(&self) -> MprR {
        MprR::new(((self.bits >> 5) & 1) != 0)
    }
    #[doc = "Bit 6 - Wake-Up Frame Received\n\nWhen set, this bit indicates the power management event was\n\ngenerated due to reception of a wake-up frame. This bit is\n\ncleared by a read into this register."]
    #[inline(always)]
    pub fn wfr(&self) -> WfrR {
        WfrR::new(((self.bits >> 6) & 1) != 0)
    }
    #[doc = "Bit 9 - Global Unicast\n\nWhen set, enables any unicast packet filtered by the GMAC (DAF)\n\naddress recognition to be a wake-up frame."]
    #[inline(always)]
    pub fn gu(&self) -> GuR {
        GuR::new(((self.bits >> 9) & 1) != 0)
    }
    #[doc = "Bit 31 - Wake-Up Frame Filter Register Pointer Reset\n\nWhen set, resets the Remote Wake-up Frame Filter register\n\npointer to 3'b000. It is automatically cleared after 1 clock cycle."]
    #[inline(always)]
    pub fn wffrpr(&self) -> WffrprR {
        WffrprR::new(((self.bits >> 31) & 1) != 0)
    }
}
impl W {
    #[doc = "Bit 0 - Power Down\n\nWhen set, all received frames will be dropped. This bit is cleared\n\nautomatically when a magic packet or Wake-Up frame is\n\nreceived, and Power-Down mode is disabled. Frames received\n\nafter this bit is cleared are forwarded to the application. This bit\n\nmust only be set when either the Magic Packet Enable or Wake-\n\nUp Frame Enable bit is set high."]
    #[inline(always)]
    #[must_use]
    pub fn pd(&mut self) -> PdW<GmacPmtCtrlStaSpec> {
        PdW::new(self, 0)
    }
    #[doc = "Bit 1 - Magic Packet Enable\n\nWhen set, enables generation of a power management event due\n\nto Magic Packet reception."]
    #[inline(always)]
    #[must_use]
    pub fn mpe(&mut self) -> MpeW<GmacPmtCtrlStaSpec> {
        MpeW::new(self, 1)
    }
    #[doc = "Bit 2 - Wake-Up Frame Enable\n\nWhen set, enables generation of a power management event due\n\nto wake-up frame reception."]
    #[inline(always)]
    #[must_use]
    pub fn wfe(&mut self) -> WfeW<GmacPmtCtrlStaSpec> {
        WfeW::new(self, 2)
    }
    #[doc = "Bit 9 - Global Unicast\n\nWhen set, enables any unicast packet filtered by the GMAC (DAF)\n\naddress recognition to be a wake-up frame."]
    #[inline(always)]
    #[must_use]
    pub fn gu(&mut self) -> GuW<GmacPmtCtrlStaSpec> {
        GuW::new(self, 9)
    }
    #[doc = "Bit 31 - Wake-Up Frame Filter Register Pointer Reset\n\nWhen set, resets the Remote Wake-up Frame Filter register\n\npointer to 3'b000. It is automatically cleared after 1 clock cycle."]
    #[inline(always)]
    #[must_use]
    pub fn wffrpr(&mut self) -> WffrprW<GmacPmtCtrlStaSpec> {
        WffrprW::new(self, 31)
    }
}
#[doc = "PMT Control and Status Register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`gmac_pmt_ctrl_sta::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`gmac_pmt_ctrl_sta::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct GmacPmtCtrlStaSpec;
impl crate::RegisterSpec for GmacPmtCtrlStaSpec {
    type Ux = u32;
}
#[doc = "`read()` method returns [`gmac_pmt_ctrl_sta::R`](R) reader structure"]
impl crate::Readable for GmacPmtCtrlStaSpec {}
#[doc = "`write(|w| ..)` method takes [`gmac_pmt_ctrl_sta::W`](W) writer structure"]
impl crate::Writable for GmacPmtCtrlStaSpec {
    type Safety = crate::Unsafe;
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0x8000_0000;
}
#[doc = "`reset()` method sets GMAC_PMT_CTRL_STA to value 0"]
impl crate::Resettable for GmacPmtCtrlStaSpec {
    const RESET_VALUE: u32 = 0;
}
