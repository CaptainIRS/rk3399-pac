#[doc = "Register `TIMEOUT` reader"]
pub type R = crate::R<TimeoutSpec>;
#[doc = "Register `TIMEOUT` writer"]
pub type W = crate::W<TimeoutSpec>;
#[doc = "Field `DATATIMEOUTCOUNTERVALUE` reader - This value determines the interval by which DAT line time-outs\n\nare detected.\n\nRefer to the Data Time-out Error in the Error Interrupt\n\nStatusregister for information on factors that dictate time-out\n\ngeneration. Time-out clock frequency will be generated by\n\ndividing the sdclockTMCLK by this value. When setting this\n\nregister, prevent inadvertent time-out events by clearing the\n\nData Time-out Error Status Enable (in the Error Interrupt Status\n\nEnable register).\n\n4'hf: Reserved\n\n4'he: TMCLK * 2^27\n\n......\n\n4'h1: TMCLK * 2^14\n\n4'h0: TMCLK * 2^13"]
pub type DatatimeoutcountervalueR = crate::FieldReader;
#[doc = "Field `DATATIMEOUTCOUNTERVALUE` writer - This value determines the interval by which DAT line time-outs\n\nare detected.\n\nRefer to the Data Time-out Error in the Error Interrupt\n\nStatusregister for information on factors that dictate time-out\n\ngeneration. Time-out clock frequency will be generated by\n\ndividing the sdclockTMCLK by this value. When setting this\n\nregister, prevent inadvertent time-out events by clearing the\n\nData Time-out Error Status Enable (in the Error Interrupt Status\n\nEnable register).\n\n4'hf: Reserved\n\n4'he: TMCLK * 2^27\n\n......\n\n4'h1: TMCLK * 2^14\n\n4'h0: TMCLK * 2^13"]
pub type DatatimeoutcountervalueW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
impl R {
    #[doc = "Bits 0:3 - This value determines the interval by which DAT line time-outs\n\nare detected.\n\nRefer to the Data Time-out Error in the Error Interrupt\n\nStatusregister for information on factors that dictate time-out\n\ngeneration. Time-out clock frequency will be generated by\n\ndividing the sdclockTMCLK by this value. When setting this\n\nregister, prevent inadvertent time-out events by clearing the\n\nData Time-out Error Status Enable (in the Error Interrupt Status\n\nEnable register).\n\n4'hf: Reserved\n\n4'he: TMCLK * 2^27\n\n......\n\n4'h1: TMCLK * 2^14\n\n4'h0: TMCLK * 2^13"]
    #[inline(always)]
    pub fn datatimeoutcountervalue(&self) -> DatatimeoutcountervalueR {
        DatatimeoutcountervalueR::new(self.bits & 0x0f)
    }
}
impl W {
    #[doc = "Bits 0:3 - This value determines the interval by which DAT line time-outs\n\nare detected.\n\nRefer to the Data Time-out Error in the Error Interrupt\n\nStatusregister for information on factors that dictate time-out\n\ngeneration. Time-out clock frequency will be generated by\n\ndividing the sdclockTMCLK by this value. When setting this\n\nregister, prevent inadvertent time-out events by clearing the\n\nData Time-out Error Status Enable (in the Error Interrupt Status\n\nEnable register).\n\n4'hf: Reserved\n\n4'he: TMCLK * 2^27\n\n......\n\n4'h1: TMCLK * 2^14\n\n4'h0: TMCLK * 2^13"]
    #[inline(always)]
    #[must_use]
    pub fn datatimeoutcountervalue(&mut self) -> DatatimeoutcountervalueW<TimeoutSpec> {
        DatatimeoutcountervalueW::new(self, 0)
    }
}
#[doc = "Timeout control register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`timeout::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`timeout::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct TimeoutSpec;
impl crate::RegisterSpec for TimeoutSpec {
    type Ux = u8;
}
#[doc = "`read()` method returns [`timeout::R`](R) reader structure"]
impl crate::Readable for TimeoutSpec {}
#[doc = "`write(|w| ..)` method takes [`timeout::W`](W) writer structure"]
impl crate::Writable for TimeoutSpec {
    type Safety = crate::Unsafe;
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
}
#[doc = "`reset()` method sets TIMEOUT to value 0"]
impl crate::Resettable for TimeoutSpec {
    const RESET_VALUE: u8 = 0;
}
